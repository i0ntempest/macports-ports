# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           xcode 1.0

github.setup        Kyle-Ye eligibility 0.2.1-beta
name                eligibility-util
revision            0
categories          sysutils
maintainers         {i0ntempest @i0ntempest} openmaintainer
platforms           {macosx >= 24}
license             MIT

description         Open source macOS system eligibility tweaking utility
long_description    ${description}. Can be used for enabling features unavailable in certain Mac SKUs, \
                    e.g. region locked features like Apple Intelligence.

checksums           rmd160  fcd6158935b6b0e84a06e57800fe6a6e9b4fbca8 \
                    sha256  56bd6be6de38654a78bccd370d2f2cfa9fb2b3dd950f794c2f1b326101ba9b34 \
                    size    380169

if {${os.major} < 24} {
    known_fail      yes
    pre-fetch {
        ui_error "${name} requires macOS 15 or later"
        return -code error "incompatible macOS version"
    }
}

proc system_check {} {
    set sip_status [exec csrutil status 2>/dev/null]
    set boot_args [exec nvram boot-args 2>/dev/null]
    set sip_disabled [string match "*disabled*" ${sip_status}]
    set amfi_disabled [string match "*amfi_get_out_of_my_way=1*" ${boot_args}]
    set warn false
    if {!${sip_disabled} && ![variant_isset sip]} {
        ui_warn "SIP is enabled, installed binary will be unusable."
        set warn true
    }
    if {!${amfi_disabled} && ![variant_isset sip]} {
        ui_warn "AMFI is enabled, installed binary will be unusable."
        set warn true
    }
    if ${warn} {
        ui_warn "Consider using \"+sip\" variant or check port notes on how to disable SIP and AMFI."
    }
}

if {![variant_isset sip]} {
    pre-archivefetch {
        system_check
    }
    pre-fetch {
        system_check
    }

    notes {
        This port requires System Integrity Protection (SIP) and Apple Mobile File Integrity (AMFI) disabled\
        ("amfi_get_out_of_my_way=1" present in boot-args in nvram). If this is not the case, the binary will\
        be killed upon execution. These may be reenabled after desired system modifications were made.\
        You may also use variant "+sip" for a binary usable with SIP enabled but has reduced functionality.
    }
    notes-append {}
}

xcode.project       ${github.project}.xcodeproj
xcode.target        eligibility_util
xcode.scheme        ${xcode.target}
xcode.configuration Release

pre-build {
    #system -W ${worksrcpath} "swift build --disable-sandbox"
    #system -W ${worksrcpath} "swift package resolve"
    #system -W ${worksrcpath} \
    "xcodebuild -resolvePackageDependencies -derivedDataPath ./DerivedData \
                                            -project ${xcode.project} \
                                            -scheme ${xcode.scheme}"
}

xcode.build.settings-append \
                    CODE_SIGN_IDENTITY=- \
                    OTHER_SWIFT_FLAGS=--disable-sandbox
build.pre_args      -derivedDataPath ./DerivedData

destroot {
    xinstall -m 755 ${worksrcpath}/build/${xcode.configuration}/${xcode.target} ${destroot}${prefix}/bin
}

variant sip description "Binary is usable with System Integrity Protection enabled but has reduced functionality" {
    xcode.target    eligibility_util_sip
    xcode.scheme    ${xcode.target}
}

notes-append {
    See https://github.com/Kyle-Ye/XcodeLLMEligible for an example use case and how to disable\
    System Integrity Protection or Apple Mobile File Integrity.
}
